name: ci

on:
  pull_request:

env:
  # An envar that signals to tests we are executing in the CI environment
  CONTINUOUS_INTEGRATION: true
  MAVEN_OPTS: "-Xmx4G -XX:TieredStopAtLevel=1 -XX:+ExitOnOutOfMemoryError"
  MAVEN_INSTALL_OPTS: "-Xmx2G -XX:+ExitOnOutOfMemoryError"
  MAVEN_FAST_INSTALL: "-B -V --quiet -T 2C -DskipTests -Dair.check.skip-all -Dmaven.javadoc.skip=true"
  MAVEN_TEST: "-B -T 2C -Dair.check.skip-all -Dmaven.javadoc.skip=true -DLogTestDurationListener.enabled=true --fail-at-end"
  RETRY: .github/bin/retry

jobs:
  maven-checks:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
    timeout-minutes: 45
    steps:
      - name: Free Disk Space
        run: |
          df -h
          sudo apt-get clean
          df -h
      - uses: actions/checkout@v2
      - uses: actions/setup-java@v1
        with:
          java-version: 8
      - name: Cache local Maven repository
        id: cache-maven
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-2-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-2-
      - name: Populate maven cache
        if: steps.cache-maven.outputs.cache-hit != 'true'
        run: ./mvnw de.qaware.maven:go-offline-maven-plugin:resolve-dependencies
      - name: Maven Checks
        run: |
          export MAVEN_OPTS="${MAVEN_INSTALL_OPTS}"
          ./mvnw install -B -V -T C1 -DskipTests -P ci -pl '!:presto-server-rpm'
      - name: Test Server RPM
        run: |
          export MAVEN_OPTS="${MAVEN_INSTALL_OPTS}"
          ./mvnw verify -B -P ci -pl :presto-server-rpm
      - name: Clean Maven Output
        run: ./mvnw clean -pl '!:presto-server,!:presto-cli'

  spark-integration:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
    timeout-minutes: 60
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-java@v1
        with:
          java-version: 8
      - name: Cache local Maven repository
        id: cache-maven
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-2-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-2-
      - name: Populate maven cache
        if: steps.cache-maven.outputs.cache-hit != 'true'
        run: ./mvnw de.qaware.maven:go-offline-maven-plugin:resolve-dependencies
      - name: Maven Install
        run: |
          export MAVEN_OPTS="${MAVEN_INSTALL_OPTS}"
          ./mvnw install ${MAVEN_FAST_INSTALL} -am -pl presto-spark-launcher,presto-spark-package,presto-spark-testing
      - name: Maven Tests
        run: ./mvnw test ${MAVEN_TEST} -pl :presto-spark-testing -P test-presto-spark-integration-smoke-test

  test-other-modules:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-java@v1
        with:
          java-version: 8
      - name: Cache local Maven repository
        id: cache-maven
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-2-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-2-
      - name: Populate maven cache
        if: steps.cache-maven.outputs.cache-hit != 'true'
        run: ./mvnw de.qaware.maven:go-offline-maven-plugin:resolve-dependencies
      - name: Maven Install
        run: |
          export MAVEN_OPTS="${MAVEN_INSTALL_OPTS}"
          ./mvnw install ${MAVEN_FAST_INSTALL} -pl '!:presto-docs,!:presto-server,!:presto-server-rpm'
      - name: Maven Tests
        run: |
          ./mvnw test ${MAVEN_TEST} -pl '
            !presto-tests,
            !presto-raptor,
            !presto-accumulo,
            !presto-cassandra,
            !presto-hive,
            !presto-kudu,
            !presto-docs,
            !presto-server,
            !presto-server-rpm,
            !presto-main,
            !presto-mongodb,
            !presto-spark-package,
            !presto-spark-launcher,
            !presto-spark-testing,
            !presto-spark-base,
            !presto-redis,
            !presto-elasticsearch,
            !presto-orc,
            !presto-thrift-connector'

  product-tests-basic-environment:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
    timeout-minutes: 60
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-java@v1
        with:
          java-version: 8
      - name: Cache local Maven repository
        id: cache-maven
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-2-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-2-
      - name: Populate maven cache
        if: steps.cache-maven.outputs.cache-hit != 'true'
        run: ./mvnw de.qaware.maven:go-offline-maven-plugin:resolve-dependencies
      - name: Maven install
        run: |
          export MAVEN_OPTS="${MAVEN_INSTALL_OPTS}"
          ./mvnw install ${MAVEN_FAST_INSTALL} -am -pl '!presto-docs,!presto-server-rpm,!presto-spark-package,!presto-spark-launcher,!presto-spark-testing'
      - name: Run Product Tests Basic Environment
        run: presto-product-tests/bin/run_on_docker.sh multinode -x quarantine,big_query,storage_formats,profile_specific_tests,tpcds,cassandra,mysql_connector,postgresql_connector,mysql,kafka,avro

  product-tests-specific-environment1:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node_total: [3]
        node_index: [ 0, 1, 2 ]
      fail-fast: false
    timeout-minutes: 60
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-java@v1
        with:
          java-version: 8
      - name: Cache local Maven repository
        id: cache-maven
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-2-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-2-
      - name: Populate maven cache
        if: steps.cache-maven.outputs.cache-hit != 'true'
        run: ./mvnw de.qaware.maven:go-offline-maven-plugin:resolve-dependencies
      - name: Mave install
        run: |
          export MAVEN_OPTS="${MAVEN_INSTALL_OPTS}"
          ./mvnw install ${MAVEN_FAST_INSTALL} -am -pl '!presto-docs,!presto-server-rpm,!presto-spark-package,!presto-spark-launcher,!presto-spark-testing'
      - name: Product Tests Specific Tests 1
        env:
          NODE_TOTAL: ${{matrix.node_total}}
          NODE_INDEX: ${{matrix.node_index}}
        run: presto-product-tests/bin/run_shuffle.py 1

  product-tests-specific-environment2:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node_total: [ 2 ]
        node_index: [ 0, 1 ]
      fail-fast: false
    timeout-minutes: 60
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-java@v1
        with:
          java-version: 8
      - name: Cache local Maven repository
        id: cache-maven
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-2-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-2-
      - name: Populate maven cache
        if: steps.cache-maven.outputs.cache-hit != 'true'
        run: ./mvnw de.qaware.maven:go-offline-maven-plugin:resolve-dependencies
      - name: Maven install
        run: |
          export MAVEN_OPTS="${MAVEN_INSTALL_OPTS}"
          ./mvnw install ${MAVEN_FAST_INSTALL} -am -pl '!presto-docs,!presto-server-rpm,!presto-spark-package,!presto-spark-launcher,!presto-spark-testing'
      - name: Product Tests Specific 2
        env:
          NODE_TOTAL: ${{matrix.node_total}}
          NODE_INDEX: ${{matrix.node_index}}
        run: presto-product-tests/bin/run_shuffle.py 2
  # SQL server image sporadically hangs during the startup
  # TODO: Uncomment it once issue is fixed
  # https://github.com/Microsoft/mssql-docker/issues/76
  #  - |
  #    if [[ -v PRODUCT_TESTS_SPECIFIC_ENVIRONMENT ]]; then
  #      presto-product-tests/bin/run_on_docker.sh \
  #        singlenode-sqlserver -g sqlserver
  #    fi

  hive-tests:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
    timeout-minutes: 60
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-java@v1
        with:
          java-version: 8
      - name: Cache local Maven repository
        id: cache-maven
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-2-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-2-
      - name: Populate maven cache
        if: steps.cache-maven.outputs.cache-hit != 'true'
        run: ./mvnw de.qaware.maven:go-offline-maven-plugin:resolve-dependencies
      - name: Install Hive Module
        run: |
          export MAVEN_OPTS="${MAVEN_INSTALL_OPTS}"
          ./mvnw install ${MAVEN_FAST_INSTALL} -am -pl :presto-hive-hadoop2
      - name: Run Hive Tests
        run: presto-hive-hadoop2/bin/run_hive_tests.sh
      - name: Run Hive S3 Tests
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.HIVE_AWS_ACCESSKEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.HIVE_AWS_SECRETKEY }}
          S3_BUCKET: "presto-ci-test"
          S3_BUCKET_ENDPOINT: "s3.us-east-2.amazonaws.com"
        run: |
          if [ "${AWS_ACCESS_KEY_ID}" != "" ]; then
              presto-hive-hadoop2/bin/run_hive_s3_tests.sh
          fi
      - name: Run Hive Glue Tests
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.HIVE_AWS_ACCESSKEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.HIVE_AWS_SECRETKEY }}
        run: |
          if [ "${HIVE_AWS_ACCESS_KEY_ID}" != "" ]; then
              ./mvnw test ${MAVEN_TEST} -pl :presto-hive -P test-hive-glue
          fi

  test:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        modules:
          - ":presto-spark-base"
          - ":presto-main"
          - ":presto-tests -P presto-tests-general"
          - ":presto-raptor"
          - ":presto-accumulo"
          - ":presto-hive"
          - ":presto-hive -P test-hive-parquet-reader"
          - ":presto-hive -P test-hive-integration-smoke"
          - ":presto-hive -P test-hive-materialized-queries"
          - ":presto-hive -P test-hive-materialized-aggregations"
          - ":presto-hive -P test-hive-recoverable-execution"
          - ":presto-hive -P test-hive-pushdown-filter-queries-basic"
          - ":presto-hive -P test-hive-pushdown-filter-queries-advanced"
          - ":presto-hive -P test-hive-repartitioning"
          - ":presto-hive -P test-hive-parquet"
          - ":presto-mongodb -P test-mongo-distributed-queries"
          - ":presto-redis -P test-redis-integration-smoke-test"
          - ":presto-elasticsearch"
          - ":presto-orc"
          - ":presto-thrift-connector"
          - ":presto-tests -P presto-tests-execution-memory"
          - ":presto-tests -P ci-only-distributed-non-hash-gen"
          - ":presto-tests -P ci-only-tpch-distributed-queries"
          - ":presto-tests -P ci-only-local-queries"
          - ":presto-tests -P ci-only-distributed-queries"
          - ":presto-tests -P ci-only-aggregation-queries"
          - ":presto-tests -P ci-only-plan-determinism"
          - ":presto-cassandra -P test-cassandra-integration-smoke-test"
          - ":presto-docs"
    timeout-minutes: 80
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-java@v1
        with:
          java-version: 8
      - name: Cache local Maven repository
        id: cache-maven
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-2-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-2-
      - name: Populate maven cache
        if: steps.cache-maven.outputs.cache-hit != 'true'
        run: ./mvnw de.qaware.maven:go-offline-maven-plugin:resolve-dependencies
      - name: Maven Install
        run: |
          export MAVEN_OPTS="${MAVEN_INSTALL_OPTS}"
          ./mvnw install ${MAVEN_FAST_INSTALL} -am -pl $(echo '${{ matrix.modules }}' | cut -d' ' -f1)
      - name: Maven Tests
        run: ./mvnw test ${MAVEN_TEST} -pl ${{ matrix.modules }}

  kudu:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
    timeout-minutes: 60
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-java@v1
        with:
          java-version: 8
      - name: Cache local Maven repository
        id: cache-maven
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-2-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-2-
      - name: Populate maven cache
        if: steps.cache-maven.outputs.cache-hit != 'true'
        run: ./mvnw de.qaware.maven:go-offline-maven-plugin:resolve-dependencies
      - name: Maven Install
        run: |
          export MAVEN_OPTS="${MAVEN_INSTALL_OPTS}"
          ./mvnw install ${MAVEN_FAST_INSTALL} -am -pl presto-kudu
      - name: Kudu Tests
        run: |
          presto-kudu/bin/run_kudu_tests.sh 3 null
          presto-kudu/bin/run_kudu_tests.sh 1 ""
          presto-kudu/bin/run_kudu_tests.sh 1 presto::

  web-ui-checks:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v2
      - name: Web UI Checks
        run: presto-main/bin/check_webui.sh